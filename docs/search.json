[
  {
    "objectID": "index.html#quarto-워크샵",
    "href": "index.html#quarto-워크샵",
    "title": "빛에듀 워크샵",
    "section": "Quarto 워크샵",
    "text": "Quarto 워크샵\n한국 R 사용자회에서는 통계패키지를 사용하고 있는 다양한 사용자의 요구를 충족시키기 위해 다양한 기능이 포함된 소프트웨어, 콘텐츠, 데이터, 커뮤니티를 운영하고 있습니다. 서울특별시교육청 혁신교육과제의 일환으로 데이터 문해력과 디지털 글쓰기를 주제로 대면 컨퍼런스를 아래와 같이 개최하게 되었습니다.\n\n일시: 2022년 11월 26일 (토) 14:00 ~ 18:00\n장소: 성균관대학교 경제관 32211 호\n참석자: 디지털 교육 관심있으신 선생님, 학부모, 학생, 개발자\n웹사이트: https://r2bit.com/sen/"
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "환경설정",
    "section": "",
    "text": "Quarto 기반 데이터 과학 작업흐름은 프로그래밍 언어 뿐만 아니라 통합개발환경(IDE), 다양한 문서 양식과 최종적으로 배포하는 환경까지 아우르게 된다. 예를 들어 데이터 과학 주 언어로 R을 선정하고, 통합개발환경으로 RStudio를 선택하고, 산출물을 웹사이트로 특정하고 이를 배포하는 서비스로 GitHub Pages를 선정하는 것이다."
  },
  {
    "objectID": "setup.html#quarto-render",
    "href": "setup.html#quarto-render",
    "title": "환경설정",
    "section": "quarto render",
    "text": "quarto render\n_quarto.yml은 콘텐츠 즉 .qmd파일을 어떤 형태로 꿰어야 되는지 지정한 정보를 담고 있다면 quarto render 명령어 그 이전에 quarto preview 명령어는 개발자나 저작자가 저작한 저작물을 기계가 컴파일하는 과정을 담고 있다. 윈도우의 경우 quarto.cmd 맥/리눅스는 quarto 명령어로 해당 작업을 수행하게 된다.\n\n\n\n\n\n상기 컴파일 작업을 통해 docs 디렉토리가 새로 생겼으며 정적 웹사이트를 기계인식 가능한 형태로 변환된 것을 확인할 수 있다.\n\n$ quarto.cmd render\n\n.....\n\n$ tree -d\n.\n|-- _site\n|   `-- site_libs\n|       |-- bootstrap\n|       |-- clipboard\n|       |-- quarto-html\n|       |-- quarto-nav\n|       `-- quarto-search\n|-- docs\n|   `-- site_libs\n|       |-- bootstrap\n|       |-- clipboard\n|       |-- quarto-html\n|       |-- quarto-nav\n|       `-- quarto-search\n`-- image\n\n15 directories\n\n$ rm -rf _site\n\n로컬에서 docs/ 디렉토리로 들어가서 index.html 파일을 더블클릭하게 되면 웹브라이져 크롬에서 웹사이트가 정상 제작된 것을 확인할 수 있다. 이제 로컬 컴퓨터에서 제작한 웹사이트를 본인 뿐만 아니라 인터넷 접속이 가능한 다른 분들도 데이터 과학 결과물을 공유할 수 있도록 외부에 배포하는 과정을 살펴보자."
  },
  {
    "objectID": "setup.html#github-저장소",
    "href": "setup.html#github-저장소",
    "title": "환경설정",
    "section": "GitHub 저장소",
    "text": "GitHub 저장소\nGitHub 웹사이트에 회원가입하고 나면 저장소를 무료로 생성시킬 수 있다. 저장소 명칭, 저장소 공개범위(공개 혹은 비공개) 그리고 Git 브랜치 등 관련 사항을 개발 언어와 목적에 맞춰 취사선택한다."
  },
  {
    "objectID": "setup.html#git",
    "href": "setup.html#git",
    "title": "환경설정",
    "section": "Git",
    "text": "Git\n로컬 컴퓨터에서 작업을 한 후 git add . → git commit -m\"첫 커밋\" Git 작업흐름에 맞춰 작업을 한 후에 프라이빗 사설 저장소의 경우 PAT(Personal Assess Token) 을 사용해서 다음 명령어로 연결하는 하고 그렇지 않고 공공 퍼블릭으로 설정한 경우 다음 명령어로 원격 GitHub 저장소를 연결한다.\n\n로컬과 원격 연결\n로컬 컴퓨터에 있는 저장소를 원격 클라우드 컴퓨터 저장소와 연결시켜야 후속 작업을 진행할 수 있게 된다. 이를 위해서 먼저 로컬 저장소와 원격 저장소를 git remote add origin 명령어로 연결시킨다. git remote -v 명령어로 관련 사항을 확인한다.\n\n$ git remote add origin git@github.com:bit2r/workshop.git\n$ git remote -v\norigin  git@github.com:bit2r/workshop.git (fetch)\norigin  git@github.com:bit2r/workshop.git (push)\n\n\n\n원격 저장소 가져오기\n로컬 저장소와 원격 저장소가 연결되었으면 다음 작업은 먼저 원격 저장소의 저작물을 로컬 컴퓨터로 끌어가져오는 과정을 거친다. 저장소와 로컬 저장소는 모두 각자 Git History가 달라 이를 합치하는 과정을 거쳐야 한다. 이때 --allow-unrelated-histories 옵션을 준다.\n\n$ git pull origin main --allow-unrelated-histories\nFrom github.com:bit2r/workshop\n * branch            main       -> FETCH_HEAD\n\n\n\n원격 저장소 내보내기\n원격 저장소를 연결했고 원격 저장소와 로컬 저장소 관련 충돌(conflict) 과정을 해소했기 때문에 원격 저장소아 로컬 조장소 동기화에 필요한 모든 준비가 마무리되었기 때문에 다음 단계로 git push 명령어로 로컬 저장소 결과물을 원격 저장소로 내보낸다.\n\n$ git push --set-upstream origin main\nEverything up-to-date\nBranch 'main' set up to track remote branch 'main' from 'origin'."
  }
]